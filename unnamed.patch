Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/.gitignore	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,37 @@
+HELP.md
+.gradle
+build/
+!gradle/wrapper/gradle-wrapper.jar
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+bin/
+!**/src/main/**/bin/
+!**/src/test/**/bin/
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+out/
+!**/src/main/**/out/
+!**/src/test/**/out/
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+
+### VS Code ###
+.vscode/
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(revision 711ece9573df7a66a417dc55070f5ae880cc0d71)
+++ b/README.md	(revision 711ece9573df7a66a417dc55070f5ae880cc0d71)
@@ -0,0 +1,4 @@
+# artisan-finds
+# as
+# artisan-finds
+# artisan-finds
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(revision 862b0ad9bc72b5c852bca6efb1f4f700e10ddd3b)
+++ b/build.gradle	(revision 862b0ad9bc72b5c852bca6efb1f4f700e10ddd3b)
@@ -0,0 +1,63 @@
+plugins {
+    id 'java'
+    id 'org.springframework.boot' version '3.2.2'
+    id 'io.spring.dependency-management' version '1.1.4'
+}
+
+group = 'com.example'
+version = '0.0.1-SNAPSHOT'
+
+java {
+    sourceCompatibility = '17'
+}
+
+configurations {
+    compileOnly {
+        extendsFrom annotationProcessor
+    }
+}
+
+repositories {
+    mavenCentral()
+}
+
+ext {
+    set('springCloudVersion', "2023.0.0")
+}
+
+dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
+    compileOnly 'org.projectlombok:lombok'
+    runtimeOnly 'org.postgresql:postgresql'
+    annotationProcessor 'org.projectlombok:lombok'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    implementation 'org.modelmapper:modelmapper:3.2.0'
+
+    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
+    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
+    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
+    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
+    implementation 'redis.clients:jedis:5.1.0'
+    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.0'
+//    implementation 'org.liquibase:liquibase-core'
+    implementation 'cz.jirutka.rsql:rsql-parser:2.1.0'
+    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
+
+
+
+
+
+}
+
+dependencyManagement {
+    imports {
+        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
+    }
+}
+
+tasks.named('test') {
+    useJUnitPlatform()
+}
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/gradle/wrapper/gradle-wrapper.properties	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,7 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
+networkTimeout=10000
+validateDistributionUrl=true
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/gradlew	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,249 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
+APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC2039,SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command:
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
+#     and any embedded shellness will be escaped.
+#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
+#     treated as '${Hostname}' itself on the command line.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/gradlew.bat	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,92 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(revision 862b0ad9bc72b5c852bca6efb1f4f700e10ddd3b)
+++ b/settings.gradle	(revision 862b0ad9bc72b5c852bca6efb1f4f700e10ddd3b)
@@ -0,0 +1,1 @@
+rootProject.name = 'artisan_finds'
Index: src/main/java/com/example/artisan_finds/ArtisanFindsApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/ArtisanFindsApplication.java b/src/main/java/com/example/artisan_finds/ArtisanFindsApplication.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/ArtisanFindsApplication.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,27 @@
+package com.example.artisan_finds;
+
+import com.example.artisan_finds.common.service.GenericCrudService;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.cloud.openfeign.EnableFeignClients;
+import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
+import org.springframework.data.redis.repository.configuration.EnableRedisRepositories;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
+@EnableFeignClients
+@SpringBootApplication
+@EnableJpaAuditing
+@EnableRedisRepositories
+public class ArtisanFindsApplication {
+    //todo OAuth2,product ni ichma ich categorisini qilish,card,
+    public static void main(String[] args) {
+
+        SpringApplication.run(ArtisanFindsApplication.class, args);
+    }
+
+}
+
+
Index: src/main/java/com/example/artisan_finds/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/Test.java b/src/main/java/com/example/artisan_finds/Test.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/Test.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,19 @@
+package com.example.artisan_finds;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+
+@Controller
+@RequestMapping("/test")
+public class Test {
+
+
+    @GetMapping
+    public String post(){
+        return "TEST";
+    }
+}
Index: src/main/java/com/example/artisan_finds/TestBodyDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/TestBodyDto.java b/src/main/java/com/example/artisan_finds/TestBodyDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/TestBodyDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,15 @@
+package com.example.artisan_finds;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class TestBodyDto {
+
+    private String name;
+    private String lastName;
+}
+
Index: src/main/java/com/example/artisan_finds/category/CategoryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/CategoryController.java b/src/main/java/com/example/artisan_finds/category/CategoryController.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/CategoryController.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,26 @@
+package com.example.artisan_finds.category;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.category.entity.SubCategory;
+import lombok.RequiredArgsConstructor;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequiredArgsConstructor
+@RequestMapping("/category")
+public  class CategoryController {
+
+private final CategoryService categoryService;
+//todo base categoryni chiqarishni qilish
+    //todo yuborilgan subkategoryni productlarni chiqarish
+    //todo product bilan categorylarni bog'lash
+    @GetMapping("/first/categoryType")
+    public ResponseEntity<List<SubCategory>> category(){
+        List<SubCategory> subCategory = categoryService.getSubCategory("ACCESSORIES");
+        return ResponseEntity.ok(subCategory);
+    }
+}
Index: src/main/java/com/example/artisan_finds/category/CategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/CategoryRepository.java b/src/main/java/com/example/artisan_finds/category/CategoryRepository.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/CategoryRepository.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,14 @@
+package com.example.artisan_finds.category;
+
+
+import com.example.artisan_finds.category.entity.Category;
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.common.repository.GenericSpecificationRepository;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface CategoryRepository extends JpaRepository<Category,Integer> {
+
+    Category findCategoriesByCategoryType(CategoryType categoryType);
+}
Index: src/main/java/com/example/artisan_finds/category/CategoryService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/CategoryService.java b/src/main/java/com/example/artisan_finds/category/CategoryService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/CategoryService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,28 @@
+package com.example.artisan_finds.category;
+
+import com.example.artisan_finds.category.entity.Category;
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.category.entity.SubCategory;
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class CategoryService {
+
+    private final CategoryRepository categoryRepository;
+    private final SubCategoryRepository subCategoryRepository;
+
+
+    public List<SubCategory>getSubCategory(String subCategoryType){
+        CategoryType categoryType = CategoryType.valueOf(subCategoryType);
+        Category category = categoryRepository.findCategoriesByCategoryType(categoryType);
+
+        List<SubCategory> byCategoryId = subCategoryRepository.findAllByCategoryId(1);
+        return byCategoryId;
+
+    }
+}
Index: src/main/java/com/example/artisan_finds/category/SubCategoryRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/SubCategoryRepository.java b/src/main/java/com/example/artisan_finds/category/SubCategoryRepository.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/SubCategoryRepository.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,15 @@
+package com.example.artisan_finds.category;
+
+import com.example.artisan_finds.category.entity.SubCategory;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface SubCategoryRepository extends JpaRepository<SubCategory,Integer> {
+
+    List<SubCategory> findAllByCategoryId(Integer categoryId);
+}
Index: src/main/java/com/example/artisan_finds/category/entity/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/entity/Category.java b/src/main/java/com/example/artisan_finds/category/entity/Category.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/entity/Category.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,27 @@
+package com.example.artisan_finds.category.entity;
+
+
+import com.fasterxml.jackson.annotation.JsonManagedReference;
+import jakarta.persistence.*;
+import lombok.*;
+
+import java.util.List;
+import java.util.UUID;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+@Table(name = "category")
+public class Category {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+
+    @Enumerated(EnumType.STRING)
+    private  CategoryType categoryType;
+
+    @JsonManagedReference
+    @OneToMany(mappedBy = "category", cascade = CascadeType.ALL)
+    private List<SubCategory> subcategories;
+}
Index: src/main/java/com/example/artisan_finds/category/entity/CategoryType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/entity/CategoryType.java b/src/main/java/com/example/artisan_finds/category/entity/CategoryType.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/entity/CategoryType.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,19 @@
+package com.example.artisan_finds.category.entity;
+
+
+public enum CategoryType {
+
+    ACCESSORIES,
+    ART,
+    BABY,
+    BAGS,
+    CLOTHING,
+    GIFTS;
+
+
+
+//    public static List<SubCategories> getSubCategories(CategoryType categoryType){
+//
+//        return SubCategories.getSubCategories(categoryType);
+//    }
+}
Index: src/main/java/com/example/artisan_finds/category/entity/SubCategories.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/entity/SubCategories.java b/src/main/java/com/example/artisan_finds/category/entity/SubCategories.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/entity/SubCategories.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,34 @@
+package com.example.artisan_finds.category.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.List;
+
+@AllArgsConstructor
+@Getter
+public enum SubCategories {
+
+    KeychainLanyards,
+    HatsCaps,
+
+
+    ScarvesWraps,
+
+
+    PatchesPins,
+
+
+    HairAccessories,
+
+
+    BeltsBraces;
+
+
+//    public static List<SubCategories>getSubCategories(CategoryType categoryType){
+//
+//     return    Arrays.stream(SubCategories.values()).filter(subCategories -> subCategories.getCategoryType()==categoryType).toList();
+//    }
+}
Index: src/main/java/com/example/artisan_finds/category/entity/SubCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/category/entity/SubCategory.java b/src/main/java/com/example/artisan_finds/category/entity/SubCategory.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/category/entity/SubCategory.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,28 @@
+package com.example.artisan_finds.category.entity;
+
+
+import com.fasterxml.jackson.annotation.JsonBackReference;
+import jakarta.persistence.*;
+import lombok.*;
+import net.minidev.json.annotate.JsonIgnore;
+
+import java.util.List;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class SubCategory {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+
+    @Enumerated(EnumType.STRING)
+    private SubCategories subCategories;
+
+
+    @ManyToOne
+    @JoinColumn(name = "category_id")
+    @JsonBackReference
+    private Category category;
+}
Index: src/main/java/com/example/artisan_finds/common/configuration/CorsConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/configuration/CorsConfiguration.java b/src/main/java/com/example/artisan_finds/common/configuration/CorsConfiguration.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/configuration/CorsConfiguration.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,27 @@
+package com.example.artisan_finds.common.configuration;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+@Configuration
+public class CorsConfiguration {
+
+    @Value("${allowed.origins}")
+    private String allowedOrigins;
+    @Bean
+    public WebMvcConfigurer getCorsConfiguration(){
+        return  new WebMvcConfigurer() {
+            @Override
+            public void addCorsMappings(CorsRegistry registry) {
+                registry.addMapping("/**")
+                        .allowedOrigins("*")
+                        .allowedMethods("GET", "POST", "PUT", "DELETE")
+                        .allowedHeaders("*");
+
+            }
+        };
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/configuration/CustomPageImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/configuration/CustomPageImpl.java b/src/main/java/com/example/artisan_finds/common/configuration/CustomPageImpl.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/configuration/CustomPageImpl.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,35 @@
+package com.example.artisan_finds.common.configuration;
+
+import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.databind.JsonNode;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.data.domain.PageImpl;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+
+import java.util.ArrayList;
+import java.util.List;
+@Configuration
+public class CustomPageImpl<T> extends PageImpl<T> {
+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
+    public CustomPageImpl(@JsonProperty("content") List<T> content, @JsonProperty("number") int number,
+                          @JsonProperty("size") int size, @JsonProperty("totalElements") Long totalElements,
+                          @JsonProperty("pageable") JsonNode pageable, @JsonProperty("last") boolean last,
+                          @JsonProperty("totalPages") int totalPages, @JsonProperty("sort") JsonNode sort,
+                          @JsonProperty("numberOfElements") int numberOfElements) {
+        super(content, PageRequest.of(number, 1), 10);
+    }
+
+    public CustomPageImpl(List<T> content, Pageable pageable, long total) {
+        super(content, pageable, total);
+    }
+
+    public CustomPageImpl(List<T> content) {
+        super(content);
+    }
+
+    public CustomPageImpl() {
+        super(new ArrayList<>());
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/artisan_finds/common/configuration/ModelMapperConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/configuration/ModelMapperConfiguration.java b/src/main/java/com/example/artisan_finds/common/configuration/ModelMapperConfiguration.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/configuration/ModelMapperConfiguration.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,18 @@
+package com.example.artisan_finds.common.configuration;
+
+import org.modelmapper.ModelMapper;
+import org.modelmapper.convention.MatchingStrategies;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class ModelMapperConfiguration
+{
+    @Bean
+    public ModelMapper mapper()
+    {
+        ModelMapper modelMapper = new ModelMapper();
+        modelMapper.getConfiguration().setMatchingStrategy( MatchingStrategies.STRICT );
+        return modelMapper;
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/configuration/SwaggerConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/configuration/SwaggerConfiguration.java b/src/main/java/com/example/artisan_finds/common/configuration/SwaggerConfiguration.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/configuration/SwaggerConfiguration.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,55 @@
+package com.example.artisan_finds.common.configuration;
+
+import io.swagger.v3.oas.models.Components;
+import io.swagger.v3.oas.models.ExternalDocumentation;
+import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.info.Contact;
+import io.swagger.v3.oas.models.info.Info;
+import io.swagger.v3.oas.models.info.License;
+import io.swagger.v3.oas.models.security.SecurityRequirement;
+import io.swagger.v3.oas.models.security.SecurityScheme;
+import io.swagger.v3.oas.models.servers.Server;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+
+import java.util.List;
+
+@Configuration
+@EnableWebSecurity
+
+public class SwaggerConfiguration {
+
+    @Bean
+    public OpenAPI openAPI(){
+        return new OpenAPI()
+                .info(new Info()
+                        .title("Spring 6 Swagger 2 Annotation Example")
+                        .description("Spring 6 Swagger Simple Application")
+                        .version("${api.version}")
+                        .contact(new Contact()
+                                .name("ARTISAN FINDS")
+                                .email("zafarmalikov@gmail.com")
+                        )
+                        .license(new License()
+                                .name("Apache 2.0")
+                                .url("http://springdoc.org"))
+                        .termsOfService("http://swagger.io/terms/"))
+                .externalDocs(new ExternalDocumentation()
+                        .description("SpringShop Wiki Documentation")
+                        .url(""))
+                .servers(List.of(
+                        new Server()
+                                .url("http://localhost:8082")
+                                .description("Production")
+                )).addSecurityItem(new SecurityRequirement().addList("bearerAuth"))
+                .components(new Components()
+                        .addSecuritySchemes("bearerAuth", new SecurityScheme()
+                                .name("bearerAuth")
+                                .type(SecurityScheme.Type.HTTP)
+                                .scheme("bearer")
+                                .bearerFormat("JWT")));
+
+
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/exception/CustomErrorResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/CustomErrorResponse.java b/src/main/java/com/example/artisan_finds/common/exception/CustomErrorResponse.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/CustomErrorResponse.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,23 @@
+package com.example.artisan_finds.common.exception;
+
+import com.fasterxml.jackson.annotation.JsonInclude;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.http.HttpStatus;
+
+import java.time.LocalDateTime;
+import java.util.Map;
+
+@Data
+@Builder
+@AllArgsConstructor
+@NoArgsConstructor
+@JsonInclude(JsonInclude.Include.NON_NULL)
+public class CustomErrorResponse {
+    private String message;
+    private HttpStatus status;
+    private Map<String, Object> errors;
+    private LocalDateTime timestamp;
+}
Index: src/main/java/com/example/artisan_finds/common/exception/CustomExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionHandler.java b/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionHandler.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionHandler.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,140 @@
+package com.example.artisan_finds.common.exception;
+
+import jakarta.persistence.EntityNotFoundException;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.el.parser.TokenMgrError;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.access.AccessDeniedException;
+import org.springframework.validation.FieldError;
+import org.springframework.web.bind.MethodArgumentNotValidException;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.RestControllerAdvice;
+import org.springframework.web.servlet.resource.NoResourceFoundException;
+
+import java.time.LocalDateTime;
+import java.util.HashMap;
+import java.util.Map;
+
+@Slf4j
+@RestControllerAdvice
+public class CustomExceptionHandler
+{
+    public CustomErrorResponse buildErrorResponse( String message, HttpStatus status )
+    {
+        return buildErrorResponse( message, status, null );
+    }
+
+    public CustomErrorResponse buildErrorResponse( Map<String, Object> errors, HttpStatus status )
+    {
+        return buildErrorResponse( null, status, errors );
+    }
+
+    public CustomErrorResponse buildErrorResponse( String message, HttpStatus status, Map<String, Object> errors )
+    {
+        return new CustomErrorResponse( message, status, errors, LocalDateTime.now() );
+    }
+
+    @ExceptionHandler( Exception.class )
+    public CustomErrorResponse handleExceptions( Exception e )
+    {
+        log.error( e.getMessage(), e );
+        return buildErrorResponse( "Something is wrong, please repeat later", HttpStatus.INTERNAL_SERVER_ERROR );
+    }
+
+    @ExceptionHandler( EntityNotFoundException.class )
+    public ResponseEntity<CustomErrorResponse> handleEntityNotFoundException( EntityNotFoundException e )
+    {
+        log.error( e.getMessage(), e );
+        return ResponseEntity
+            .status( HttpStatus.NOT_FOUND )
+            .body( buildErrorResponse( e.getMessage(), HttpStatus.NOT_FOUND ) );
+    }
+
+    @ExceptionHandler( DataIntegrityViolationException.class )
+    // todo We need to handle these exceptions correctly
+    public ResponseEntity<CustomErrorResponse> handleDataIntegrityViolationException( DataIntegrityViolationException e )
+    {
+        log.error( e.getMessage(), e );
+
+        String message = e.getCause() == null ? e.getMessage() : e.getCause().getMessage();
+        message = e.getCause().getCause() == null ? message : e.getCause().getCause().getMessage();
+        message = e.getCause().getCause().getCause() == null ? message : e.getCause().getCause().getCause().getMessage();
+
+        return ResponseEntity
+            .status( HttpStatus.CONFLICT )
+            .body( buildErrorResponse( message, HttpStatus.CONFLICT ) );
+    }
+
+
+    @ExceptionHandler(NoResourceFoundException.class)
+    public ResponseEntity<CustomErrorResponse> handleNoResourceFoundException(NoResourceFoundException e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.NOT_FOUND)
+                .body(CustomErrorResponse.builder()
+                        .message("Wrong swagger-url entered")
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.NOT_FOUND)
+                        .build());
+    }
+
+    @ExceptionHandler(AccessDeniedException.class)
+    public ResponseEntity<CustomErrorResponse> handleAccessDeniedException(AccessDeniedException e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.FORBIDDEN)
+                .body(CustomErrorResponse.builder()
+                        .message(e.getMessage())
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.FORBIDDEN)
+                        .build());
+    }
+    @ExceptionHandler(PhoneNumberNotVerifiedException.class)
+    public ResponseEntity<CustomErrorResponse> handlePhoneNumberNotVerifiedException(PhoneNumberNotVerifiedException e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.FORBIDDEN)
+                .body(CustomErrorResponse.builder()
+                        .message(e.getMessage())
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.FORBIDDEN)
+                        .build());
+    }
+    @ExceptionHandler(SmsVerificationException.class)
+    public ResponseEntity<CustomErrorResponse> handleSmsVerificationException(SmsVerificationException e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.FORBIDDEN)
+                .body(CustomErrorResponse.builder()
+                        .message(e.getMessage())
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.FORBIDDEN)
+                        .build());
+    }
+
+    @ExceptionHandler(CustomExceptionThisUsernameOlReadyTaken.class)
+    public ResponseEntity<CustomErrorResponse> handleSmsVerificationException(CustomExceptionThisUsernameOlReadyTaken e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.BAD_REQUEST)
+                .body(CustomErrorResponse.builder()
+                        .message(e.getMessage())
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.BAD_REQUEST)
+                        .build());
+    }
+
+    @ExceptionHandler(ExceptionUNAUTHORIZED.class)
+    public ResponseEntity<CustomErrorResponse> handleSmsVerificationException(ExceptionUNAUTHORIZED e){
+        log.error(e.getMessage(),e);
+        return ResponseEntity
+                .status(HttpStatus.UNAUTHORIZED)
+                .body(CustomErrorResponse.builder()
+                        .message(e.getMessage())
+                        .timestamp(LocalDateTime.now())
+                        .status(HttpStatus.UNAUTHORIZED)
+                        .build());
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/exception/CustomExceptionThisUsernameOlReadyTaken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionThisUsernameOlReadyTaken.java b/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionThisUsernameOlReadyTaken.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/CustomExceptionThisUsernameOlReadyTaken.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,9 @@
+package com.example.artisan_finds.common.exception;
+
+public class CustomExceptionThisUsernameOlReadyTaken extends Exception {
+
+    public CustomExceptionThisUsernameOlReadyTaken(String message){
+          super(message);
+    }
+
+}
Index: src/main/java/com/example/artisan_finds/common/exception/ExceptionUNAUTHORIZED.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/ExceptionUNAUTHORIZED.java b/src/main/java/com/example/artisan_finds/common/exception/ExceptionUNAUTHORIZED.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/ExceptionUNAUTHORIZED.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,8 @@
+package com.example.artisan_finds.common.exception;
+
+public class ExceptionUNAUTHORIZED extends RuntimeException{
+
+    public ExceptionUNAUTHORIZED (String message){
+        super(message);
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/exception/PhoneNumberNotVerifiedException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/PhoneNumberNotVerifiedException.java b/src/main/java/com/example/artisan_finds/common/exception/PhoneNumberNotVerifiedException.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/PhoneNumberNotVerifiedException.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,11 @@
+package com.example.artisan_finds.common.exception;
+
+public class PhoneNumberNotVerifiedException extends RuntimeException{
+    public PhoneNumberNotVerifiedException(String message) {
+        super(message);
+    }
+
+    public PhoneNumberNotVerifiedException(String message, Throwable cause) {
+        super(message, cause);
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/exception/SmsVerificationException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/exception/SmsVerificationException.java b/src/main/java/com/example/artisan_finds/common/exception/SmsVerificationException.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/exception/SmsVerificationException.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,11 @@
+package com.example.artisan_finds.common.exception;
+
+public class SmsVerificationException extends RuntimeException{
+    public SmsVerificationException(String message) {
+        super(message);
+    }
+
+    public SmsVerificationException(String message, Throwable cause) {
+        super(message, cause);
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/repository/GenericSpecificationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/repository/GenericSpecificationRepository.java b/src/main/java/com/example/artisan_finds/common/repository/GenericSpecificationRepository.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/repository/GenericSpecificationRepository.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,11 @@
+package com.example.artisan_finds.common.repository;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+import org.springframework.data.repository.NoRepositoryBean;
+
+@NoRepositoryBean
+public interface GenericSpecificationRepository<ENTITY, ID> extends JpaRepository<ENTITY, ID>, JpaSpecificationExecutor<ENTITY>
+{
+
+}
Index: src/main/java/com/example/artisan_finds/common/rsql/CustomRsqlVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/rsql/CustomRsqlVisitor.java b/src/main/java/com/example/artisan_finds/common/rsql/CustomRsqlVisitor.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/rsql/CustomRsqlVisitor.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,37 @@
+package com.example.artisan_finds.common.rsql;
+
+import cz.jirutka.rsql.parser.ast.AndNode;
+import cz.jirutka.rsql.parser.ast.ComparisonNode;
+import cz.jirutka.rsql.parser.ast.OrNode;
+import cz.jirutka.rsql.parser.ast.RSQLVisitor;
+import org.springframework.data.jpa.domain.Specification;
+
+public class CustomRsqlVisitor<T> implements RSQLVisitor<Specification<T>, Void>
+{
+
+    private final GenericRsqlSpecBuilder<T> builder;
+
+    public CustomRsqlVisitor()
+    {
+        builder = new GenericRsqlSpecBuilder<T>();
+    }
+
+    @Override
+    public Specification<T> visit( AndNode node, Void param )
+    {
+        return builder.createSpecification( node );
+    }
+
+    @Override
+    public Specification<T> visit( OrNode node, Void param )
+    {
+        return builder.createSpecification( node );
+    }
+
+    @Override
+    public Specification<T> visit( ComparisonNode node, Void params )
+    {
+        return builder.createSpecification( node );
+    }
+}
+
Index: src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecBuilder.java b/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecBuilder.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecBuilder.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,65 @@
+package com.example.artisan_finds.common.rsql;
+
+import cz.jirutka.rsql.parser.ast.ComparisonNode;
+import cz.jirutka.rsql.parser.ast.LogicalNode;
+import cz.jirutka.rsql.parser.ast.LogicalOperator;
+import cz.jirutka.rsql.parser.ast.Node;
+import org.springframework.data.jpa.domain.Specification;
+
+import java.util.List;
+import java.util.Objects;
+
+public class GenericRsqlSpecBuilder<T>
+{
+
+    public Specification<T> createSpecification( Node node )
+    {
+        if( node instanceof LogicalNode )
+        {
+            return createSpecification( (LogicalNode) node );
+        }
+        if( node instanceof ComparisonNode )
+        {
+            return createSpecification( (ComparisonNode) node );
+        }
+        return null;
+    }
+
+    public Specification<T> createSpecification( LogicalNode logicalNode )
+    {
+        List<Specification<T>> specs = logicalNode.getChildren()
+                                                  .stream()
+                                                  .map( this::createSpecification )
+                                                  .filter( Objects::nonNull )
+                                                  .toList();
+
+        Specification<T> result = specs.get( 0 );
+        if( logicalNode.getOperator() == LogicalOperator.AND )
+        {
+            for( int i = 1; i < specs.size(); i++ )
+            {
+                result = Specification.where( result ).and( specs.get( i ) );
+            }
+        }
+        else if( logicalNode.getOperator() == LogicalOperator.OR )
+        {
+            for( int i = 1; i < specs.size(); i++ )
+            {
+                result = Specification.where( result ).or( specs.get( i ) );
+            }
+        }
+
+        return result;
+    }
+
+    public Specification<T> createSpecification( ComparisonNode comparisonNode )
+    {
+        return Specification.where(
+            new GenericRsqlSpecification<T>(
+                comparisonNode.getSelector(),
+                comparisonNode.getOperator(),
+                comparisonNode.getArguments()
+            )
+        );
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecification.java b/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecification.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/rsql/GenericRsqlSpecification.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,112 @@
+package com.example.artisan_finds.common.rsql;
+
+import cz.jirutka.rsql.parser.ast.ComparisonOperator;
+import jakarta.persistence.criteria.CriteriaBuilder;
+import jakarta.persistence.criteria.CriteriaQuery;
+import jakarta.persistence.criteria.Predicate;
+import jakarta.persistence.criteria.Root;
+import lombok.AllArgsConstructor;
+import org.springframework.data.jpa.domain.Specification;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@AllArgsConstructor
+public class GenericRsqlSpecification<T> implements Specification<T>
+{
+
+    private String property;
+    private ComparisonOperator operator;
+    private List<String> arguments;
+
+    @Override
+    public Predicate toPredicate( Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder )
+    {
+        List<Object> args = castArguments( root );
+        Object argument = args.get( 0 );
+        RsqlSearchOperation simpleOperator = RsqlSearchOperation.getSimpleOperator( operator );
+
+        if( simpleOperator == null )
+        {
+            return null;
+        }
+
+        switch( simpleOperator )
+        {
+            case EQUAL:
+            {
+                if( argument instanceof String )
+                {
+                    return builder.like( root.get( property ), argument.toString().replace( '*', '%' ) );
+                }
+                else if( argument == null )
+                {
+                    return builder.isNull( root.get( property ) );
+                }
+                else
+                {
+                    return builder.equal( root.get( property ), argument );
+                }
+            }
+            case NOT_EQUAL:
+            {
+                if( argument instanceof String )
+                {
+                    return builder.notLike( root.get( property ), argument.toString().replace( '*', '%' ) );
+                }
+                else if( argument == null )
+                {
+                    return builder.isNotNull( root.get( property ) );
+                }
+                else
+                {
+                    return builder.notEqual( root.get( property ), argument );
+                }
+            }
+            case GREATER_THAN:
+            {
+                return builder.greaterThan( root.get( property ), argument.toString() );
+            }
+            case GREATER_THAN_OR_EQUAL:
+            {
+                return builder.greaterThanOrEqualTo( root.get( property ), argument.toString() );
+            }
+            case LESS_THAN:
+            {
+                return builder.lessThan( root.get( property ), argument.toString() );
+            }
+            case LESS_THAN_OR_EQUAL:
+            {
+                return builder.lessThanOrEqualTo( root.get( property ), argument.toString() );
+            }
+            case IN:
+                return root.get( property ).in( args );
+            case NOT_IN:
+                return builder.not( root.get( property ).in( args ) );
+        }
+
+        return null;
+    }
+
+    private List<Object> castArguments( final Root<T> root )
+    {
+
+        Class<?> type = root.get( property ).getJavaType();
+
+        return arguments.stream().map( arg -> {
+            if( type.equals( Integer.class ) )
+            {
+                return Integer.parseInt( arg );
+            }
+            else if( type.equals( Long.class ) )
+            {
+                return Long.parseLong( arg );
+            }
+            else
+            {
+                return arg;
+            }
+        } ).collect( Collectors.toList() );
+    }
+}
+
Index: src/main/java/com/example/artisan_finds/common/rsql/RsqlSearchOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/rsql/RsqlSearchOperation.java b/src/main/java/com/example/artisan_finds/common/rsql/RsqlSearchOperation.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/rsql/RsqlSearchOperation.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,37 @@
+package com.example.artisan_finds.common.rsql;
+
+import cz.jirutka.rsql.parser.ast.ComparisonOperator;
+import cz.jirutka.rsql.parser.ast.RSQLOperators;
+import lombok.Getter;
+
+@Getter
+public enum RsqlSearchOperation
+{
+    EQUAL( RSQLOperators.EQUAL ),
+    NOT_EQUAL( RSQLOperators.NOT_EQUAL ),
+    GREATER_THAN( RSQLOperators.GREATER_THAN ),
+    GREATER_THAN_OR_EQUAL( RSQLOperators.GREATER_THAN_OR_EQUAL ),
+    LESS_THAN( RSQLOperators.LESS_THAN ),
+    LESS_THAN_OR_EQUAL( RSQLOperators.LESS_THAN_OR_EQUAL ),
+    IN( RSQLOperators.IN ),
+    NOT_IN( RSQLOperators.NOT_IN );
+
+    private final ComparisonOperator operator;
+
+    RsqlSearchOperation( ComparisonOperator operator )
+    {
+        this.operator = operator;
+    }
+
+    public static RsqlSearchOperation getSimpleOperator( ComparisonOperator operator )
+    {
+        for( RsqlSearchOperation operation : values() )
+        {
+            if( operation.getOperator() == operator )
+            {
+                return operation;
+            }
+        }
+        return null;
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/rsql/SpecificationBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/rsql/SpecificationBuilder.java b/src/main/java/com/example/artisan_finds/common/rsql/SpecificationBuilder.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/rsql/SpecificationBuilder.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,19 @@
+package com.example.artisan_finds.common.rsql;
+
+import cz.jirutka.rsql.parser.RSQLParser;
+import cz.jirutka.rsql.parser.ast.Node;
+import cz.jirutka.rsql.parser.ast.RSQLOperators;
+import org.springframework.data.jpa.domain.Specification;
+
+public class SpecificationBuilder
+{
+    public static <ENTITY> Specification<ENTITY> build( String predicate )
+    {
+        if( predicate == null || predicate.isBlank() )
+        {
+            return null;
+        }
+        Node rootNode = new RSQLParser( RSQLOperators.defaultOperators() ).parse( predicate );
+        return rootNode.accept( new CustomRsqlVisitor<>() );
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/artisan_finds/common/security/Security.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/security/Security.java b/src/main/java/com/example/artisan_finds/common/security/Security.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/security/Security.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,41 @@
+package com.example.artisan_finds.common.security;
+
+import com.example.artisan_finds.common.security.jwt.MyJwtFilter;
+import lombok.RequiredArgsConstructor;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.config.Customizer;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.web.SecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+@RequiredArgsConstructor
+@Configuration
+public class Security {
+
+    @Bean
+    public SecurityFilterChain securityFilterChain(HttpSecurity security, MyJwtFilter jwtFilter) throws Exception {
+        return security
+                .cors(AbstractHttpConfigurer::disable)
+                .csrf(AbstractHttpConfigurer::disable)
+                .authorizeHttpRequests(authorize-> authorize.requestMatchers("swagger - ui.html",
+                                "/swagger-ui/**",
+                                "/v3/api-docs/**",
+                                "/swagger-resources/**","/user/**","/","/category/**","/test/**","/product/**")
+
+                        .permitAll().anyRequest().authenticated())
+                .formLogin(Customizer.withDefaults())
+//                .oauth2Login(Customizer.withDefaults())
+                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
+                .build();
+    }
+
+    @Bean
+    public PasswordEncoder passwordEncoder(){
+    return new BCryptPasswordEncoder();
+}
+
+}
Index: src/main/java/com/example/artisan_finds/common/security/jwt/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/security/jwt/JwtService.java b/src/main/java/com/example/artisan_finds/common/security/jwt/JwtService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/security/jwt/JwtService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,59 @@
+package com.example.artisan_finds.common.security.jwt;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import io.jsonwebtoken.io.Decoders;
+import io.jsonwebtoken.security.Keys;
+import jakarta.transaction.Transactional;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.security.oauth2.jwt.Jwt;
+import org.springframework.stereotype.Component;
+
+import java.security.Key;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.Date;
+import java.util.Map;
+
+@Component
+public class JwtService {
+
+    @Value("${jwt.security.key}")
+    private String SECRET_KEY ;
+
+    @Transactional
+    public String generateToken(String phoneNumber, Map<String, Object> claims){
+        return Jwts.builder()
+                .signWith(signKey())
+                .addClaims(claims)
+                .setSubject(phoneNumber)
+                .setIssuedAt(Date.from(Instant.now()))
+                .setExpiration(Date.from(Instant.now().plus(3, ChronoUnit.DAYS)))
+                .compact();
+    }
+
+    @Transactional
+    public String generateToken(String phoneNumber){
+        return generateToken(phoneNumber, Collections.emptyMap());
+    }
+
+
+    @Transactional
+    public Claims claims(String token) {
+        return Jwts.parserBuilder()
+                .setSigningKey(signKey())
+                .build()
+                .parseClaimsJws(token)
+                .getBody();
+    }
+
+    @Transactional
+    protected Key signKey(){
+        byte[] decode = Decoders.BASE64.decode(SECRET_KEY);
+        return Keys.hmacShaKeyFor(decode);
+    }
+
+
+}
Index: src/main/java/com/example/artisan_finds/common/security/jwt/MyJwtFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/security/jwt/MyJwtFilter.java b/src/main/java/com/example/artisan_finds/common/security/jwt/MyJwtFilter.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/security/jwt/MyJwtFilter.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,54 @@
+package com.example.artisan_finds.common.security.jwt;
+
+import io.jsonwebtoken.Claims;
+import io.micrometer.common.util.StringUtils;
+import jakarta.servlet.FilterChain;
+import jakarta.servlet.ServletException;
+import jakarta.servlet.http.HttpServletRequest;
+import jakarta.servlet.http.HttpServletResponse;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpHeaders;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.stereotype.Component;
+import org.springframework.web.filter.OncePerRequestFilter;
+
+import java.io.IOException;
+
+@Component
+@RequiredArgsConstructor
+@Slf4j
+public class MyJwtFilter extends OncePerRequestFilter {
+
+    private final JwtService jwtService;
+    private final UserDetailsService userDetailsService;
+
+    @Override
+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
+        try {
+            String header = request.getHeader(HttpHeaders.AUTHORIZATION);
+            if (StringUtils.isBlank(header) || !header.startsWith("Bearer")) {
+                filterChain.doFilter(request, response);
+                return;
+            }
+
+            String substring = header.substring(7);
+            Claims claims = jwtService.claims(substring);
+
+            String subject = claims.getSubject();
+            UserDetails userDetails = userDetailsService.loadUserByUsername(subject);
+
+            var authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
+
+            SecurityContextHolder.getContext().setAuthentication(authenticationToken);
+
+            filterChain.doFilter(request, response);
+        }catch (Exception e){
+            log.error(e.getMessage(),e);
+            filterChain.doFilter(request,response);
+        }
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/service/GenericCrudService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/service/GenericCrudService.java b/src/main/java/com/example/artisan_finds/common/service/GenericCrudService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/service/GenericCrudService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,99 @@
+package com.example.artisan_finds.common.service;
+
+import com.example.artisan_finds.common.repository.GenericSpecificationRepository;
+import jakarta.persistence.EntityNotFoundException;
+import com.example.artisan_finds.common.rsql.SpecificationBuilder;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.jpa.domain.Specification;
+
+import java.lang.reflect.Field;
+
+public abstract class GenericCrudService<ENTITY, ID, CREATE_DTO, UPDATE_DTO, PATCH_DTO, RESPONSE_DTO>
+{
+    public RESPONSE_DTO create(CREATE_DTO createDto)
+    {
+        ENTITY saved = save( createDto );
+        return getMapper().toResponseDto( saved );
+    }
+
+    protected abstract GenericDtoMapper<ENTITY, CREATE_DTO, UPDATE_DTO, RESPONSE_DTO> getMapper();
+
+    protected abstract GenericSpecificationRepository<ENTITY, ID> getRepository();
+
+    protected abstract ENTITY save(CREATE_DTO createDto);
+
+    protected abstract ENTITY updateEntity( UPDATE_DTO updateDto, ENTITY entity );
+
+    public Page<RESPONSE_DTO> getAll( Pageable pageable, String predicate )
+    {
+        Specification<ENTITY> specification = SpecificationBuilder.build( predicate );
+        if( specification == null )
+        {
+            return getRepository().findAll( pageable )
+                                  .map( entity -> getMapper().toResponseDto( entity ) );
+        }
+        return getRepository().findAll( specification, pageable )
+                              .map( entity -> getMapper().toResponseDto( entity ) );
+    }
+
+    public RESPONSE_DTO getById( ID id )
+    {
+        ENTITY entity = getRepository()
+            .findById( id )
+            .orElseThrow( () -> throwEntityNotFoundException( id, getEntityClass().getSimpleName() ) );
+        return getMapper().toResponseDto( entity );
+    }
+
+    // todo make message generic
+    public RuntimeException throwEntityNotFoundException( ID id, String entityName )
+    {
+        String message = "%s with id=%s not found".formatted( entityName, id.toString() );
+        return new EntityNotFoundException( message );
+    }
+
+    protected abstract Class<ENTITY> getEntityClass();
+
+    public RESPONSE_DTO update( ID id, UPDATE_DTO updateDto )
+    {
+        ENTITY entity = getRepository()
+            .findById( id )
+            .orElseThrow( () -> throwEntityNotFoundException( id, getEntityClass().getSimpleName() ) );
+        ENTITY saved = updateEntity( updateDto, entity );
+        return getMapper().toResponseDto( saved );
+    }
+
+    public RESPONSE_DTO patch( ID id, PATCH_DTO patchDto ) throws IllegalAccessException, NoSuchFieldException
+    {
+        ENTITY entity = getRepository().findById( id )
+                                       .orElseThrow( EntityNotFoundException::new );
+
+        Class<?> entityClass = entity.getClass();
+        Class<?> patchDtoClass = patchDto.getClass();
+
+        for( Field field : patchDtoClass.getDeclaredFields() )
+        {
+            field.setAccessible( true );
+            Object value = field.get( patchDto );
+            if( value != null )
+            {
+                Field entityClassField = entityClass.getDeclaredField( field.getName() );
+                entityClassField.setAccessible( true );
+                entityClassField.set( entity, value );
+            }
+        }
+
+        ENTITY saved = getRepository().save( entity );
+
+        return getMapper().toResponseDto( saved );
+    }
+
+    public void delete( ID id )
+    {
+        if( !getRepository().existsById( id ) )
+        {
+            throw throwEntityNotFoundException( id, getEntityClass().getSimpleName() );
+        }
+        getRepository().deleteById( id );
+    }
+}
Index: src/main/java/com/example/artisan_finds/common/service/GenericDtoMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/common/service/GenericDtoMapper.java b/src/main/java/com/example/artisan_finds/common/service/GenericDtoMapper.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/common/service/GenericDtoMapper.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,11 @@
+package com.example.artisan_finds.common.service;
+
+public abstract class GenericDtoMapper<ENTITY, CREATE_DTO, UPDATE_DTO, RESPONSE_DTO>
+{
+    public abstract ENTITY toEntity( CREATE_DTO createDto );
+
+    public abstract RESPONSE_DTO toResponseDto( ENTITY entity );
+
+    public abstract void update( UPDATE_DTO updateDto, ENTITY entity );
+    public abstract CREATE_DTO toCreateDto(ENTITY entity);
+}
Index: src/main/java/com/example/artisan_finds/notification/AbstractNotification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/AbstractNotification.java b/src/main/java/com/example/artisan_finds/notification/AbstractNotification.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/AbstractNotification.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,11 @@
+package com.example.artisan_finds.notification;
+
+
+import com.example.artisan_finds.notification.dto.NotificationRequestDto;
+
+public abstract class AbstractNotification {
+
+    public abstract boolean sendNotification(NotificationRequestDto requestDttDto);
+
+    public  abstract boolean supports(NotificationType notificationType);
+}
Index: src/main/java/com/example/artisan_finds/notification/NotificationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/NotificationService.java b/src/main/java/com/example/artisan_finds/notification/NotificationService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/NotificationService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,24 @@
+package com.example.artisan_finds.notification;
+
+import lombok.RequiredArgsConstructor;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+public class NotificationService {
+
+    private final List<AbstractNotification> abstractNotifications;
+
+    public AbstractNotification getService(NotificationType notificationType){
+
+        for (AbstractNotification abstractNotification : abstractNotifications) {
+
+            if (abstractNotification.supports(notificationType)) {
+                return abstractNotification;
+            }
+        }
+            throw new IllegalArgumentException( "%s notification type is not supported ".formatted( notificationType ) );
+    }
+}
Index: src/main/java/com/example/artisan_finds/notification/NotificationType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/NotificationType.java b/src/main/java/com/example/artisan_finds/notification/NotificationType.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/NotificationType.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,5 @@
+package com.example.artisan_finds.notification;
+
+public enum NotificationType {
+    SMS
+}
Index: src/main/java/com/example/artisan_finds/notification/dto/NotificationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/dto/NotificationRequestDto.java b/src/main/java/com/example/artisan_finds/notification/dto/NotificationRequestDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/dto/NotificationRequestDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,23 @@
+package com.example.artisan_finds.notification.dto;
+
+import com.example.artisan_finds.notification.NotificationType;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Builder
+public class NotificationRequestDto {
+
+    private String phoneNumber;
+    private String message;
+    private NotificationType notificationType;
+
+    public NotificationRequestDto(String phoneNumber, String message) {
+        this.phoneNumber = phoneNumber;
+        this.message = message;
+    }
+}
Index: src/main/java/com/example/artisan_finds/notification/sms/NotificationFeign.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/sms/NotificationFeign.java b/src/main/java/com/example/artisan_finds/notification/sms/NotificationFeign.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/sms/NotificationFeign.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,22 @@
+package com.example.artisan_finds.notification.sms;
+
+import com.example.artisan_finds.notification.sms.dto.EskizRefreshResponseDto;
+import com.example.artisan_finds.notification.sms.dto.EskizSmsSentRequestDto;
+import org.springframework.cloud.openfeign.FeignClient;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.bind.annotation.PatchMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestHeader;
+
+@FeignClient(name = "notification", url = "notify.eskiz.uz/api")
+public interface NotificationFeign {
+
+    @PatchMapping("/auth/refresh")
+    EskizRefreshResponseDto refresh(@RequestHeader(HttpHeaders.AUTHORIZATION) String token);
+
+    @PostMapping("/message/sms/send")
+    EskizRefreshResponseDto send(@RequestBody EskizSmsSentRequestDto requestDto, @RequestHeader(HttpHeaders.AUTHORIZATION) String token);
+
+
+}
Index: src/main/java/com/example/artisan_finds/notification/sms/SmsNotificationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/sms/SmsNotificationService.java b/src/main/java/com/example/artisan_finds/notification/sms/SmsNotificationService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/sms/SmsNotificationService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,54 @@
+package com.example.artisan_finds.notification.sms;
+
+import com.example.artisan_finds.notification.AbstractNotification;
+import com.example.artisan_finds.notification.NotificationType;
+import com.example.artisan_finds.notification.dto.NotificationRequestDto;
+import com.example.artisan_finds.notification.sms.dto.EskizRefreshResponseDto;
+import com.example.artisan_finds.notification.sms.dto.EskizSmsSentRequestDto;
+import feign.FeignException;
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Service;
+
+
+@Service
+@RequiredArgsConstructor
+@Slf4j
+public class SmsNotificationService extends AbstractNotification {
+
+    private final NotificationFeign notificationFeign;
+
+    @Value("${artisan_finds.eskiz.sms.token}")
+    private String token;
+
+
+
+    @Override
+    public boolean sendNotification(NotificationRequestDto requestDttDto) {
+        try {
+            EskizRefreshResponseDto send = notificationFeign.send(new EskizSmsSentRequestDto(requestDttDto.getPhoneNumber(), requestDttDto.getMessage()), token);
+            return true;
+        }catch (FeignException.Forbidden | FeignException.Unauthorized ex){
+            try {
+                EskizRefreshResponseDto refreshToken = notificationFeign.refresh(token);
+                token=refreshToken.getData().get("token");
+                notificationFeign.send(new EskizSmsSentRequestDto(requestDttDto.getPhoneNumber(), requestDttDto.getMessage()),token);
+                return true;
+            }catch (Exception e){
+                log.error("Exception happend while refreshing eskiz jwt token", e);
+                return false;
+            }
+        }catch (Exception e){
+            log.error("Unable to send sms to number .Exception happend", e);
+            return false;
+        }
+    }
+
+
+
+    @Override
+    public boolean supports(NotificationType notificationType) {
+        return notificationType==NotificationType.SMS;
+    }
+}
Index: src/main/java/com/example/artisan_finds/notification/sms/dto/EskizRefreshResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizRefreshResponseDto.java b/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizRefreshResponseDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizRefreshResponseDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,15 @@
+package com.example.artisan_finds.notification.sms.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.HashMap;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+public class EskizRefreshResponseDto {
+
+    private HashMap<String , String >data;
+}
Index: src/main/java/com/example/artisan_finds/notification/sms/dto/EskizSmsSentRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizSmsSentRequestDto.java b/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizSmsSentRequestDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/notification/sms/dto/EskizSmsSentRequestDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,22 @@
+package com.example.artisan_finds.notification.sms.dto;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@NoArgsConstructor
+@Data
+public class EskizSmsSentRequestDto {
+
+    @JsonProperty("mobile_phone")
+    private String phoneNumber;
+
+    private String message;
+
+    private final String from="4546";
+
+    public EskizSmsSentRequestDto(String phoneNumber, String message) {
+        this.phoneNumber = phoneNumber;
+        this.message = message;
+    }
+}
Index: src/main/java/com/example/artisan_finds/product/ProductController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/ProductController.java b/src/main/java/com/example/artisan_finds/product/ProductController.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/ProductController.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,55 @@
+package com.example.artisan_finds.product;
+
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.product.dto.ProductCreateDto;
+import com.example.artisan_finds.product.dto.ProductResponseDto;
+import com.example.artisan_finds.product.entity.Product;
+import lombok.RequiredArgsConstructor;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+import java.util.UUID;
+
+@RestController
+@RequestMapping("/product")
+@RequiredArgsConstructor
+public class ProductController {
+
+    private final ProductService productService;
+
+
+    @PostMapping
+    public ResponseEntity<ProductResponseDto>create(@RequestBody ProductCreateDto productCreateDto){
+        ProductResponseDto productResponseDto = productService.create(productCreateDto);
+        return ResponseEntity.status(HttpStatus.CREATED)
+                .body(productResponseDto);
+    }
+
+
+    @GetMapping("/type")
+    public ResponseEntity<List<ProductResponseDto>> getAllProductByType(
+            @RequestParam CategoryType categoryType,
+            Pageable pageable,
+            @RequestParam(required = false) String predicate
+    ) {
+        List<ProductResponseDto> allByType = productService.getAllByType(categoryType, pageable, predicate);
+
+        return ResponseEntity.ok(allByType);
+    }
+
+
+    @GetMapping("/sub-categories")
+    public ResponseEntity<List<ProductResponseDto>>getAllProductBySubCategories(@RequestParam SubCategories subCategories){
+        List<ProductResponseDto> allBySubCategories = productService.getAllBySubCategories(subCategories);
+        return ResponseEntity.ok(allBySubCategories);
+    }
+
+
+}
Index: src/main/java/com/example/artisan_finds/product/ProductDtoMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/ProductDtoMapper.java b/src/main/java/com/example/artisan_finds/product/ProductDtoMapper.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/ProductDtoMapper.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,37 @@
+package com.example.artisan_finds.product;
+
+
+import com.example.artisan_finds.common.service.GenericDtoMapper;
+import com.example.artisan_finds.product.dto.ProductCreateDto;
+import com.example.artisan_finds.product.dto.ProductResponseDto;
+import com.example.artisan_finds.product.dto.ProductUpdateDto;
+import com.example.artisan_finds.product.entity.Product;
+import lombok.RequiredArgsConstructor;
+import org.modelmapper.ModelMapper;
+import org.springframework.stereotype.Component;
+
+@Component
+@RequiredArgsConstructor
+public class ProductDtoMapper extends GenericDtoMapper<Product, ProductCreateDto, ProductUpdateDto, ProductResponseDto> {
+
+    private final ModelMapper modelMapper;
+    @Override
+    public Product toEntity(ProductCreateDto productCreateDto) {
+        return modelMapper.map(productCreateDto,Product.class) ;
+    }
+
+    @Override
+    public ProductResponseDto toResponseDto(Product product) {
+        return modelMapper.map(product, ProductResponseDto.class);
+    }
+
+    @Override
+    public void update(ProductUpdateDto productUpdateDto, Product product) {
+        modelMapper.map(productUpdateDto,product);
+    }
+
+    @Override
+    public ProductCreateDto toCreateDto(Product product) {
+        return modelMapper.map(product, ProductCreateDto.class);
+    }
+}
Index: src/main/java/com/example/artisan_finds/product/ProductRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/ProductRepository.java b/src/main/java/com/example/artisan_finds/product/ProductRepository.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/ProductRepository.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,12 @@
+package com.example.artisan_finds.product;
+
+import com.example.artisan_finds.common.repository.GenericSpecificationRepository;
+import com.example.artisan_finds.product.entity.Product;
+import org.springframework.stereotype.Repository;
+
+import java.util.UUID;
+
+@Repository
+public interface ProductRepository extends GenericSpecificationRepository<Product, Integer> {
+
+}
Index: src/main/java/com/example/artisan_finds/product/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/ProductService.java b/src/main/java/com/example/artisan_finds/product/ProductService.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/ProductService.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,75 @@
+package com.example.artisan_finds.product;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.common.service.GenericCrudService;
+import com.example.artisan_finds.product.dto.ProductCreateDto;
+import com.example.artisan_finds.product.dto.ProductPatchDto;
+import com.example.artisan_finds.product.dto.ProductResponseDto;
+import com.example.artisan_finds.product.dto.ProductUpdateDto;
+import com.example.artisan_finds.product.entity.Product;
+import com.example.artisan_finds.user.UserRepository;
+import com.example.artisan_finds.user.entity.User;
+import jakarta.persistence.EntityNotFoundException;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+@Getter
+@RequiredArgsConstructor
+public class ProductService extends GenericCrudService<Product, Integer, ProductCreateDto, ProductUpdateDto, ProductPatchDto, ProductResponseDto> {
+
+    private final ProductRepository repository;
+    private final ProductDtoMapper mapper;
+    private final Class<Product>entityClass=Product.class;
+    private final UserRepository userRepository;
+
+
+    @Override
+    protected Product save(ProductCreateDto productCreateDto) {
+
+        User user = userRepository.findUserByPhoneNumber(
+                SecurityContextHolder.getContext().getAuthentication().getName()
+                )
+                .orElseThrow(EntityNotFoundException::new);
+
+        Product product = mapper.toEntity(productCreateDto);
+
+        product.setUser(user);
+
+
+        return repository.save(product);
+
+    }
+
+    @Override
+    protected Product updateEntity(ProductUpdateDto productUpdateDto, Product product) {
+         mapper.update(productUpdateDto,product);
+         return repository.save(product);
+    }
+
+
+
+    public List<ProductResponseDto> getAllByType(CategoryType categoryType, Pageable pageable, String predicate) {
+       return repository.findAll()
+               .stream()
+               .filter(product -> product.getCategoryType()==categoryType)
+               .map(mapper::toResponseDto)
+               .toList();
+    }
+
+    public List<ProductResponseDto> getAllBySubCategories(SubCategories subCategories) {
+        return repository.findAll()
+                .stream()
+                .filter(product -> product.getSubCategories()==subCategories)
+                .map(mapper::toResponseDto)
+                .toList();
+    }
+}
Index: src/main/java/com/example/artisan_finds/product/dto/ProductCreateDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/dto/ProductCreateDto.java b/src/main/java/com/example/artisan_finds/product/dto/ProductCreateDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/dto/ProductCreateDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,25 @@
+package com.example.artisan_finds.product.dto;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.product.entity.ProductType;
+import jakarta.persistence.EnumType;
+import jakarta.persistence.Enumerated;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class ProductCreateDto {
+
+    private String name;
+    private Integer productCount;
+    private Double price;
+    private String info;
+    @Enumerated(EnumType.STRING)
+    private CategoryType categoryType;
+    @Enumerated(EnumType.STRING)
+    private SubCategories subCategories;
+}
Index: src/main/java/com/example/artisan_finds/product/dto/ProductPatchDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/dto/ProductPatchDto.java b/src/main/java/com/example/artisan_finds/product/dto/ProductPatchDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/dto/ProductPatchDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,4 @@
+package com.example.artisan_finds.product.dto;
+
+public class ProductPatchDto {
+}
Index: src/main/java/com/example/artisan_finds/product/dto/ProductResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/dto/ProductResponseDto.java b/src/main/java/com/example/artisan_finds/product/dto/ProductResponseDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/dto/ProductResponseDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,20 @@
+package com.example.artisan_finds.product.dto;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class ProductResponseDto {
+    private String name;
+    private Integer productCount;
+    private Double price;
+    private String info;
+    private CategoryType categoryType;
+    private SubCategories subCategories;
+    private Integer userId;
+}
Index: src/main/java/com/example/artisan_finds/product/dto/ProductUpdateDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/dto/ProductUpdateDto.java b/src/main/java/com/example/artisan_finds/product/dto/ProductUpdateDto.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/dto/ProductUpdateDto.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,4 @@
+package com.example.artisan_finds.product.dto;
+
+public class ProductUpdateDto {
+}
Index: src/main/java/com/example/artisan_finds/product/entity/Product.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/entity/Product.java b/src/main/java/com/example/artisan_finds/product/entity/Product.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/entity/Product.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,31 @@
+package com.example.artisan_finds.product.entity;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import com.example.artisan_finds.category.entity.SubCategories;
+import com.example.artisan_finds.user.entity.User;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Entity
+public class Product {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+    private String name;
+    private Integer productCount;
+    private Double price;
+    private String info;
+    @Enumerated(EnumType.STRING)
+    private CategoryType categoryType;
+    @Enumerated(EnumType.STRING)
+    private SubCategories subCategories;
+    @ManyToOne
+    @JoinColumn(name = "user_id")
+    private User user;
+}
Index: src/main/java/com/example/artisan_finds/product/entity/ProductType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/product/entity/ProductType.java b/src/main/java/com/example/artisan_finds/product/entity/ProductType.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/product/entity/ProductType.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,7 @@
+package com.example.artisan_finds.product.entity;
+
+public enum ProductType {
+
+
+
+}
Index: src/main/java/com/example/artisan_finds/user/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/UserController.java b/src/main/java/com/example/artisan_finds/user/UserController.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/UserController.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,90 @@
+package com.example.artisan_finds.user;
+
+import com.example.artisan_finds.common.security.jwt.JwtService;
+import com.example.artisan_finds.user.dto.UserLoginRequestDto;
+import com.example.artisan_finds.user.dto.UserRegisterRequestDto;
+import com.example.artisan_finds.user.dto.UserResponseDto;
+import com.example.artisan_finds.user.dto.UserUpdateDto;
+import com.example.artisan_finds.user.otp.entity.dto.OtpVerifyDto;
+import lombok.RequiredArgsConstructor;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.security.oauth2.core.user.OAuth2User;
+import org.springframework.web.bind.annotation.*;
+
+import java.security.Principal;
+import java.util.List;
+
+@RestController
+@RequestMapping("/user")
+@RequiredArgsConstructor
+public class UserController {
+
+
+    private final UserService userService;
+    private final JwtService jwtService;
+
+    @PostMapping("/register")
+    public ResponseEntity<UserResponseDto> register(@RequestBody UserRegisterRequestDto userRegisterDto){
+        UserResponseDto userResponseDto=userService.register(userRegisterDto);
+        return ResponseEntity
+                .status(HttpStatus.CREATED)
+                .body(userResponseDto);
+    }
+
+
+    @PostMapping("/register/verify/phone-number")
+    public ResponseEntity<UserResponseDto>smsVerify(@RequestBody OtpVerifyDto otpVerifyDto){
+
+        UserResponseDto userResponseDto=userService.verifyCode(otpVerifyDto);
+        String token = jwtService.generateToken(otpVerifyDto.getPhoneNumber());
+
+        return ResponseEntity.status(HttpStatus.CREATED)
+                .header(HttpHeaders.AUTHORIZATION,"Bearer "+token)
+                .body(userResponseDto);
+    }
+
+
+    @PostMapping("/login")
+    public ResponseEntity<UserResponseDto>login(@RequestBody UserLoginRequestDto dto){
+        UserResponseDto loginDto = userService.login(dto);
+        System.out.println(dto.getPassword()+" "+dto.getPhoneNumber());
+        return ResponseEntity.ok(loginDto);
+    }
+
+    @PostMapping("/login/phone-number/verification")
+    public ResponseEntity<UserResponseDto>loginSmsVerification(@RequestBody OtpVerifyDto otpVerifyDto){
+        UserResponseDto userResponseDto = userService.verifyCode(otpVerifyDto);
+        System.out.println(otpVerifyDto.getPhoneNumber()+" "+otpVerifyDto.getCode());
+        String token = jwtService.generateToken(otpVerifyDto.getPhoneNumber());
+        return ResponseEntity.status(HttpStatus.CREATED)
+                .header(HttpHeaders.AUTHORIZATION,"Bearer "+token)
+                .body(userResponseDto);
+    }
+
+
+
+    @GetMapping("/{id}")
+    public ResponseEntity<UserResponseDto>getUser(@PathVariable("id")Integer id){
+        UserResponseDto user = userService.getById(id);
+        return ResponseEntity.ok(user);
+    }
+
+    @GetMapping
+    public ResponseEntity<Page<UserResponseDto>>getAll(Pageable pageable,String predication){
+        Page<UserResponseDto> all = userService.getAll(pageable, predication);
+        return ResponseEntity.ok(all);
+    }
+
+
+    @PutMapping("/{id}")
+    public ResponseEntity<UserResponseDto>update(@PathVariable("id")Integer id,@RequestBody UserUpdateDto userUpdateDto){
+        UserResponseDto update = userService.update(id, userUpdateDto);
+
+        return ResponseEntity.ok(update);
+    }
+}
Index: src/main/java/com/example/artisan_finds/user/UserDtoMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/UserDtoMapper.java b/src/main/java/com/example/artisan_finds/user/UserDtoMapper.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/UserDtoMapper.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,38 @@
+package com.example.artisan_finds.user;
+
+
+import com.example.artisan_finds.common.service.GenericDtoMapper;
+import com.example.artisan_finds.user.dto.UserCreateDto;
+import com.example.artisan_finds.user.dto.UserResponseDto;
+import com.example.artisan_finds.user.dto.UserUpdateDto;
+import com.example.artisan_finds.user.entity.User;
+import lombok.RequiredArgsConstructor;
+import org.bouncycastle.math.raw.Mod;
+import org.modelmapper.ModelMapper;
+import org.springframework.stereotype.Component;
+
+@Component
+@RequiredArgsConstructor
+public class UserDtoMapper extends GenericDtoMapper<User, UserCreateDto, UserUpdateDto, UserResponseDto> {
+
+    private final  ModelMapper modelMapper;
+    @Override
+    public User toEntity(UserCreateDto userCreateDto) {
+        return modelMapper.map(userCreateDto,User.class);
+    }
+
+    @Override
+    public UserResponseDto toResponseDto(User user) {
+        return modelMapper.map(user, UserResponseDto.class);
+    }
+
+    @Override
+    public void update(UserUpdateDto userUpdateDto, User user) {
+        modelMapper.map(userUpdateDto,user);
+    }
+
+    @Override
+    public UserCreateDto toCreateDto(User user) {
+        return modelMapper.map(user, UserCreateDto.class);
+    }
+}
Index: src/main/java/com/example/artisan_finds/user/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/UserRepository.java b/src/main/java/com/example/artisan_finds/user/UserRepository.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/user/UserRepository.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,12 @@
+package com.example.artisan_finds.user;
+
+import com.example.artisan_finds.common.repository.GenericSpecificationRepository;
+import com.example.artisan_finds.user.entity.User;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface UserRepository extends GenericSpecificationRepository<User, Integer> {
+    Optional<User> findUserByPhoneNumber(String phoneNumber);
+}
Index: src/main/java/com/example/artisan_finds/user/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/UserService.java b/src/main/java/com/example/artisan_finds/user/UserService.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/UserService.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,203 @@
+package com.example.artisan_finds.user;
+
+import com.example.artisan_finds.common.exception.ExceptionUNAUTHORIZED;
+import com.example.artisan_finds.common.exception.PhoneNumberNotVerifiedException;
+import com.example.artisan_finds.common.service.GenericCrudService;
+import com.example.artisan_finds.notification.AbstractNotification;
+import com.example.artisan_finds.notification.NotificationService;
+import com.example.artisan_finds.notification.NotificationType;
+import com.example.artisan_finds.notification.dto.NotificationRequestDto;
+import com.example.artisan_finds.user.dto.*;
+import com.example.artisan_finds.user.entity.User;
+import com.example.artisan_finds.user.otp.OTPRepository;
+import com.example.artisan_finds.user.otp.entity.OTP;
+import com.example.artisan_finds.user.otp.entity.dto.OtpVerifyDto;
+import jakarta.persistence.EntityNotFoundException;
+import jakarta.transaction.Transactional;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import org.modelmapper.ModelMapper;
+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.stereotype.Service;
+
+import java.time.LocalDateTime;
+import java.util.Optional;
+import java.util.Random;
+
+@Service
+@RequiredArgsConstructor
+@Getter
+public class UserService extends
+        GenericCrudService<User,Integer,  UserCreateDto, UserUpdateDto, UserPatchDto, UserResponseDto>
+        implements UserDetailsService {
+
+
+    private final UserDtoMapper mapper;
+    private final Class<User> entityClass=User.class;
+    private final OTPRepository otpRepository;
+    private final PasswordEncoder passwordEncoder;
+    private final ModelMapper modelMapper;
+    private final NotificationService notificationService;
+    private final UserRepository repository;
+
+
+
+    @Override
+    protected User save(UserCreateDto userCreateDto) {
+        User user = mapper.toEntity(userCreateDto);
+        return repository.save(user);
+    }
+
+    @Override
+    protected User updateEntity(UserUpdateDto userUpdateDto, User user) {
+        mapper.update(userUpdateDto,user);
+        return repository.save(user);
+    }
+
+
+    @Override
+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
+       return repository.findUserByPhoneNumber(username).orElseThrow(EntityNotFoundException::new);
+
+    }
+
+
+    @Transactional
+    public UserResponseDto register(UserRegisterRequestDto userCreateDto) {
+        userCreateDto.setPassword(passwordEncoder.encode(userCreateDto.getPassword()));
+
+        validateUserRegister(userCreateDto);
+
+        OTP otp = modelMapper.map(userCreateDto, OTP.class);
+        otp.setSendTime(LocalDateTime.now());
+        otp.setSentCount(1);
+        otp.setCode(String.valueOf(new Random().nextInt(1000,9999)));
+
+        AbstractNotification service = notificationService.getService(NotificationType.SMS);
+//        boolean isSend = service.sendNotification(new NotificationRequestDto(otp.getPhoneNumber(), "Your verification code: %d ".formatted(otp.getCode())));
+        boolean isSend=true;
+        if (isSend){
+            OTP save = otpRepository.save(otp);
+            return modelMapper.map(save,UserResponseDto.class);
+        }else {
+            throw new RuntimeException();
+        }
+
+    }
+
+    private void validateUserRegister(UserRegisterRequestDto req) {
+        Optional<OTP> otp = otpRepository.findById(req.getPhoneNumber());
+
+        if (otp.isPresent()) {
+            throw new RuntimeException("sms ol ready");
+        } else {
+            Optional<User> byPhoneNumber = repository.findUserByPhoneNumber(req.getPhoneNumber());
+
+            if (byPhoneNumber.isPresent()) {
+                // todo handle exception
+                throw new RuntimeException("this username ol ready taken");
+            }
+        }
+    }
+
+
+    public UserResponseDto verifyCode(OtpVerifyDto otpVerifyDto) {
+
+        OTP otp = otpRepository.findById(otpVerifyDto.getPhoneNumber())
+                .orElseThrow(() -> new ExceptionUNAUTHORIZED("You need to register first"));
+
+        if (otp.getSendTime().plusSeconds(60).isBefore(LocalDateTime.now())){
+
+            if (otp.getSentCount()>=3){
+                otp.setIsBlocked(true);
+                throw new PhoneNumberNotVerifiedException("Please try again in a day");
+            }else {
+
+                sentVerificationCode(otp.getPhoneNumber());
+            }
+                throw new RuntimeException("Your verification code is invalid");
+        }else {
+            if (otp.getCode().equals(otpVerifyDto.getCode())){
+
+                User user = modelMapper.map(otp, User.class);
+
+                Optional<User> optionalUser = repository.findUserByPhoneNumber(user.getPhoneNumber());
+                if (optionalUser.isPresent()){
+                    repository.delete(user);
+                }else {
+                repository.save(user);
+                }
+                otpRepository.delete(otp);
+
+                return mapper.toResponseDto(optionalUser.get());
+            }
+            throw new PhoneNumberNotVerifiedException("Incorrect verification code");
+        }
+    }
+
+    public void sentVerificationCode(String phoneNumber) {
+
+        OTP otp = otpRepository.findById(phoneNumber)
+                .orElseThrow(() -> new ExceptionUNAUTHORIZED("You need to register first"));
+
+
+            if (otp.getSentCount() >= 3) {
+                throw new PhoneNumberNotVerifiedException("Please try again in a day");
+            }
+
+            AbstractNotification service = notificationService.getService(NotificationType.SMS);
+
+            otp.setCode(String.valueOf(new Random().nextInt(1000, 9999)));
+            otp.setSentCount(otp.getSentCount() + 1);
+            otp.setSendTime(LocalDateTime.now());
+
+//            boolean isSend = service.sendNotification(
+//                    NotificationRequestDto.builder()
+//                            .message("Your verification code %d".formatted(otp.getCode()))
+//                            .phoneNumber(phoneNumber)
+//                            .build()
+//            );
+            boolean isSend = true;
+            if (isSend) {
+                System.out.println(otp.getCode());
+                otpRepository.save(otp);
+            } else {
+                throw new RuntimeException();
+            }
+
+    }
+
+
+    public UserResponseDto login(UserLoginRequestDto dto) {
+
+        User user = repository.findUserByPhoneNumber(dto.getPhoneNumber())
+                .orElseThrow(() -> new EntityNotFoundException("This phone number %s not found ".formatted(dto.getPhoneNumber())));
+
+        if (passwordEncoder.matches(dto.getPassword(), user.getPassword()) && !user.getIsBlocked()) {
+
+                AbstractNotification service = notificationService.getService(NotificationType.SMS);
+
+                OTP otp = modelMapper.map(user, OTP.class);
+                otp.setCode(String.valueOf(new Random().nextInt(1000, 9999)));
+                otp.setSentCount(otp.getSentCount() + 1);
+                otp.setSendTime(LocalDateTime.now());
+
+                boolean isSend = true;
+
+                if (isSend) {
+                    System.out.println(otp.getCode());
+                    otpRepository.save(otp);
+                } else {
+                    throw new RuntimeException();
+                }
+        }else{
+                throw new RuntimeException(" password is incorrect");
+            }
+
+            return mapper.toResponseDto(user);
+        }
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserCreateDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserCreateDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserCreateDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserCreateDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,18 @@
+package com.example.artisan_finds.user.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.UUID;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserCreateDto {
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserLoginRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserLoginRequestDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserLoginRequestDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserLoginRequestDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,16 @@
+package com.example.artisan_finds.user.dto;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserLoginRequestDto {
+
+    private String phoneNumber;
+    private String password;
+
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserPatchDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserPatchDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserPatchDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserPatchDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,16 @@
+package com.example.artisan_finds.user.dto;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserPatchDto {
+
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserRegisterRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserRegisterRequestDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserRegisterRequestDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserRegisterRequestDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,19 @@
+package com.example.artisan_finds.user.dto;
+
+import com.example.artisan_finds.category.entity.CategoryType;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserRegisterRequestDto {
+
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+    private CategoryType categoryType;
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserResponseDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserResponseDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserResponseDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,18 @@
+package com.example.artisan_finds.user.dto;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.UUID;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserResponseDto {
+    private Integer id;
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+}
Index: src/main/java/com/example/artisan_finds/user/dto/UserUpdateDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/dto/UserUpdateDto.java b/src/main/java/com/example/artisan_finds/user/dto/UserUpdateDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/dto/UserUpdateDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,15 @@
+package com.example.artisan_finds.user.dto;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class UserUpdateDto {
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+}
Index: src/main/java/com/example/artisan_finds/user/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/entity/User.java b/src/main/java/com/example/artisan_finds/user/entity/User.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/user/entity/User.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,90 @@
+package com.example.artisan_finds.user.entity;
+
+import com.example.artisan_finds.product.entity.Product;
+import com.example.artisan_finds.user.role.entity.Role;
+import jakarta.persistence.*;
+import lombok.*;
+import org.apache.commons.lang3.builder.EqualsExclude;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Lazy;
+import org.springframework.data.annotation.CreatedDate;
+import org.springframework.data.annotation.LastModifiedDate;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.crypto.password.PasswordEncoder;
+
+import java.time.LocalDateTime;
+import java.util.*;
+
+
+@Entity
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Table(name = "`user`")
+public class User implements UserDetails {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Integer id;
+    private String name;
+    private String surname;
+    private String email;
+    private String phoneNumber;
+    private String password;
+    private Boolean isBlocked=false;
+
+    @CreatedDate
+    private LocalDateTime createdDate;
+    @LastModifiedDate
+    private LocalDateTime updatedDate;
+
+
+    @ToString.Exclude
+    @EqualsAndHashCode.Exclude
+    @OneToMany(targetEntity = Product.class ,
+            mappedBy = "user", cascade = CascadeType.ALL,
+            orphanRemoval = true)
+    private List<Product> products = new ArrayList<>();
+
+    @ManyToMany(cascade = { CascadeType.ALL })
+    @JoinTable(
+            name = "user_role",
+            joinColumns = { @JoinColumn(name = "user_id") },
+            inverseJoinColumns = { @JoinColumn(name = "role_id") }
+    )
+    private Set<Role> roles = new HashSet<>();
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+
+        return Collections.emptyList();
+    }
+
+
+    @Override
+    public String getUsername() {
+        return phoneNumber;
+    }
+
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return true;
+    }
+
+}
Index: src/main/java/com/example/artisan_finds/user/otp/OTPRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/otp/OTPRepository.java b/src/main/java/com/example/artisan_finds/user/otp/OTPRepository.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/otp/OTPRepository.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,9 @@
+package com.example.artisan_finds.user.otp;
+
+import com.example.artisan_finds.user.otp.entity.OTP;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface OTPRepository extends CrudRepository<OTP, String> {
+}
Index: src/main/java/com/example/artisan_finds/user/otp/entity/OTP.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/otp/entity/OTP.java b/src/main/java/com/example/artisan_finds/user/otp/entity/OTP.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/otp/entity/OTP.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,30 @@
+package com.example.artisan_finds.user.otp.entity;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.redis.core.RedisHash;
+
+import java.time.LocalDateTime;
+import java.util.UUID;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@RedisHash(timeToLive = 3600)
+public class OTP {
+
+    @Id
+    private String phoneNumber;
+    private String name;
+    private String surname;
+    private String email;
+    private String password;
+    private String code;
+    private LocalDateTime sendTime;
+    private int sentCount;
+    private Boolean isBlocked=false;
+
+}
+
Index: src/main/java/com/example/artisan_finds/user/otp/entity/dto/OtpVerifyDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/otp/entity/dto/OtpVerifyDto.java b/src/main/java/com/example/artisan_finds/user/otp/entity/dto/OtpVerifyDto.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/main/java/com/example/artisan_finds/user/otp/entity/dto/OtpVerifyDto.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,14 @@
+package com.example.artisan_finds.user.otp.entity.dto;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class OtpVerifyDto {
+
+    private String phoneNumber;
+    private String code;
+}
Index: src/main/java/com/example/artisan_finds/user/role/Permission.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/role/Permission.java b/src/main/java/com/example/artisan_finds/user/role/Permission.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/user/role/Permission.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,25 @@
+package com.example.artisan_finds.user.role;
+
+import com.example.artisan_finds.user.role.entity.Role;
+import com.fasterxml.jackson.annotation.JsonBackReference;
+import jakarta.persistence.*;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.ToString;
+
+@Data
+@Entity
+@Table(name = "permissions")
+public class Permission {
+
+    @Id
+    private Integer id;
+    private String name;
+    @ToString.Exclude
+    @EqualsAndHashCode.Exclude
+    @ManyToOne
+    @JoinColumn(name = "role_id", nullable = false)
+    @JsonBackReference
+    private Role role;
+
+}
Index: src/main/java/com/example/artisan_finds/user/role/entity/Role.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/artisan_finds/user/role/entity/Role.java b/src/main/java/com/example/artisan_finds/user/role/entity/Role.java
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/java/com/example/artisan_finds/user/role/entity/Role.java	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,33 @@
+package com.example.artisan_finds.user.role.entity;
+
+import com.example.artisan_finds.user.entity.User;
+import com.example.artisan_finds.user.role.Permission;
+import com.fasterxml.jackson.annotation.JsonManagedReference;
+import jakarta.persistence.*;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.ToString;
+
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+@Data
+@Entity
+@Table(name = "role")
+public class Role {
+
+    @Id
+    private Integer id;
+    private String name;
+
+    @ToString.Exclude
+    @EqualsAndHashCode.Exclude
+    @OneToMany(mappedBy = "role", cascade = CascadeType.ALL,orphanRemoval = true)
+    @JsonManagedReference
+    private List<Permission> permissions;
+
+    @ManyToMany(mappedBy = "roles")
+    private Set<User> users = new HashSet<>();
+}
Index: src/main/resources/application.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yaml b/src/main/resources/application.yaml
new file mode 100644
--- /dev/null	(revision a88b1bcd8513470a333e00f9ad4fd86efebec202)
+++ b/src/main/resources/application.yaml	(revision a88b1bcd8513470a333e00f9ad4fd86efebec202)
@@ -0,0 +1,31 @@
+allowed:
+  origins: http://localhost:3000
+
+spring:
+
+  datasource:
+    url: jdbc:postgresql://localhost:5433/postgres
+    username: postgres
+    password: postgres
+  jpa:
+    hibernate:
+      ddl-auto: update
+    properties:
+      hibernate:
+        show_sql: true
+jwt:
+  security:
+    key: fGI9opiU1LvF18BRMZBJD3tFCy4QtSjIzh2X7rvbKKb2HqTZrreiQC9EzMqiosmq
+
+artisan_finds:
+  eskiz:
+    sms:
+      token: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDg4NjY2NDcsImlhdCI6MTcwNjI3NDY0Nywicm9sZSI6InRlc3QiLCJzaWduIjoiYzQxMjU2OTNhZTBlNmIwZGYxMTFjMjZkNmE2ZTM4ZDllOGQ1MGNmMmRhMzI0NmFjZGM4ZWE2MDE0YmMwNTdjMCIsInN1YiI6IjU3NzMifQ.dNgyUXLFZgCSp5ujk0VSx_jefJNEHHTfNzhlE6nWmR8
+
+#logging:
+#  level:
+#    org:
+#      springframework:
+#        security: trace
+server:
+  port: 8082
Index: src/main/resources/categoryForKey.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/categoryForKey.sql b/src/main/resources/categoryForKey.sql
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/resources/categoryForKey.sql	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,12 @@
+insert into category(category_type) values ('ACCESSORIES');
+insert into category(category_type) values ('BABY');
+insert into category(category_type) values ('ART');
+insert into category(category_type) values ('GIFTS');
+insert into category(category_type) values ('BAGS');
+insert into category(category_type) values ('CLOTHING');
+
+
+insert into sub_category(sub_categories, category_id) VALUES ('KeychainLanyards',1);
+insert into sub_category(sub_categories, category_id) VALUES ('HatsCaps',1);
+insert into sub_category(sub_categories, category_id) VALUES ('ScarvesWraps',1);
+
Index: src/main/resources/docker-compose/docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/docker-compose/docker-compose.yml b/src/main/resources/docker-compose/docker-compose.yml
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/src/main/resources/docker-compose/docker-compose.yml	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,12 @@
+name: artisan_finds
+services:
+  code-db:
+    image: postgres:16.1
+    ports:
+      - "5433:5432"
+    environment:
+      - "POSTGRES_PASSWORD=postgres"
+  redis:
+    image: redis:latest
+    ports:
+      - "6379:6379"
\ No newline at end of file
Index: src/test/java/com/example/artisan_finds/ArtisanFindsApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/example/artisan_finds/ArtisanFindsApplicationTests.java b/src/test/java/com/example/artisan_finds/ArtisanFindsApplicationTests.java
new file mode 100644
--- /dev/null	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
+++ b/src/test/java/com/example/artisan_finds/ArtisanFindsApplicationTests.java	(revision 1b882d1f63daeba06b5ea0486a58e03451094bc7)
@@ -0,0 +1,13 @@
+package com.example.artisan_finds;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class ArtisanFindsApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
--- /dev/null	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
+++ b/Dockerfile	(revision 5a6d06dbc9772ec2447ac4380652439d9c818c8b)
@@ -0,0 +1,12 @@
+FROM ubuntu:latest AS build
+RUN apt-get update
+RUN apt-get install openjdk-17-jdk -y
+COPY . .
+RUN ./gradlew bootJar --no-daemon
+
+FROM openjdk:17-jdk-slim
+EXPOSE 8080
+
+COPY --from-build /build/libs/demo-1.jar app.jar
+
+ENTRYPOINT ["java", "-jar", "app.jar"]
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..d64cd4917707c1f8861d8cb53dd15194d4248596
GIT binary patch
literal 43462
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
a{L3(#t_D5<)*r&`Sa^reK1CV7w*Ct@1Xhv&

